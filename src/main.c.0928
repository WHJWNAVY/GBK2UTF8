/*
 * Copyright (c) 2020 Louis Suen
 * Licensed under the MIT License. See the LICENSE file for the full text.
 */

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>

#include <string.h>
#include <unistd.h>
#include <fcntl.h>

#include <stdint.h>
#include <inttypes.h>
#include <sys/mman.h>



#include "log.h"
#include "tab_gbk2uni.h"


/*
 * Determine the current offset and remaining length of the open file.
 */
static int get_file_start_and_length(int fd, off_t *start_, size_t *length_)
{
    off_t start, end;
    size_t length;

    //assert(start_ != NULL);
    //assert(length_ != NULL);

    start = lseek(fd, 0L, SEEK_CUR);
    end = lseek(fd, 0L, SEEK_END);
    (void) lseek(fd, start, SEEK_SET);

    if (start == (off_t) -1 || end == (off_t) -1) {
        LOGE("could not determine length of file\n");
        return -1;
    }

    length = end - start;
    if (length == 0) {
        LOGE("file is empty\n");
        return -1;
    }


    if (start_) {
          *start_ = start;
    }

    if (length_) {
      *length_ = length;
    }

    return 0;
}


int main(int argc, char *argv[])
{

	int ret = -1, err, rv;
	int i, j, len;
	int fd = -1;
	char *filename = NULL;

  	void* mem_ptr = MAP_FAILED;
	size_t mem_size = 0;
	char *tmp_ptr = NULL;
	char tmp_buf[4];

	FILE *fp = NULL;

	LOGD("argc = [%d]\n", argc);
	if (argc < 2 || NULL == argv[1] || strlen(argv[1]) <= 0) {
		LOGE("input param error!!!(It can not find filename.)\n");
		goto __oops;
	}

	fp = fopen("gnew.txt", "w");
        if (fp == NULL) {
		LOGE("ERROR: unable to open %s\n", "gnew.txt");
		goto __oops;
	}
	memset(tmp_buf, 0x00, sizeof(tmp_buf));
	tmp_buf[0] = 0xb2;
	tmp_buf[1] = 0xc2;
	//fwrite(tmp_buf, 2, 1, fp);

	tmp_buf[0] = 0xC2;
	tmp_buf[1] = 0x80;

	tmp_buf[0] = 0xD5;
	tmp_buf[1] = 0xA0;

	int v = *(tmp_buf + 1) & 0x3F;
	int t = *tmp_buf & 0x1F;
	LOGD("t = [%#X]\n", t);
	LOGD("v = [%#X]\n", v);

	v |= t << 6;

	LOGD("v = [%#X]\n", v);

	filename = argv[1];
	fd = open(filename, O_RDONLY);
  	if (fd < 0) {
    		err = errno ? errno : -1;
    		LOGE("Unable to open '%s': %s\n", filename, strerror(err));
    		goto __oops;
  	}

	ret = get_file_start_and_length(fd, NULL, &mem_size);
	if (ret) {
    		LOGE("get_file_start_and_length error!\n");
    		goto __oops;
	}
	if (mem_size <= 0) {
    		LOGE("file(%s) length is 0!\n", filename);
    		goto __oops;
	}

  	LOGD("filename = [%d][%s][%zu]\n", fd, filename, mem_size);

  	mem_ptr = mmap(NULL, mem_size, PROT_READ, MAP_FILE | MAP_PRIVATE, fd, 0);
  	if (mem_ptr == MAP_FAILED) {
    		err = errno ? errno : -1;
		LOGE("unable to mmap: %s\n", strerror(errno));
    		goto __oops;
  	}
	
	
	for (i = 0, j = 0, len = (int)mem_size - 1; i < len; i += 2) {
		memset(tmp_buf, 0x00, sizeof(tmp_buf));
		memmove(tmp_buf, (char *)mem_ptr + i, 2);
		if ((tmp_buf[0]&0xFF) >= 0xD0) {
			//continue;
		}
		rv = is_valid_utf8((const unsigned char *)tmp_buf, 2);
		//LOGD("is_valid_utf8 = [%d]\n", rv);

		if (rv) {
			j ++;
			LOGD("mem_ptr = [%zu][%02X%02X][%s]\n", strlen(tmp_buf), tmp_buf[0]&0xFF, tmp_buf[1]&0xFF, tmp_buf);
			fwrite(tmp_buf, 2, 1, fp);
			if (j % 64 == 0) {
				//fwrite("\n", 1, 1, fp);
			}
		}

		if (j > 1645) {
			//break;
		}
		if (j > 100) {
			//break;
		}
	}

	
	LOGD("j = [%d]\n", j);



__oops:
	
	if (tmp_ptr) {
		free(tmp_ptr);
		tmp_ptr = NULL;
	}

  	if (mem_ptr != MAP_FAILED && mem_size > 0) {
		munmap(mem_ptr, mem_size);	
		mem_ptr = MAP_FAILED;
		mem_size = 0;
	}

	if (fd >= 0) {
		close(fd);
		fd = -1;
	}

	if (fp) {
		fclose(fp);
		fp = NULL;
	}
	
	return 0;
}


